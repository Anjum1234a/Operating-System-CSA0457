#include <stdio.h>

struct Process {
    int id;              
    int arrival_time;    
    int burst_time;      
    int remaining_time;  
    int priority;        
    int completion_time; 
    int turnaround_time; 
    int waiting_time;   
    int finished;       
};
int find_highest_priority_process(struct Process processes[], int n, int current_time) {
    int highest_priority_index = -1;
    for (int i = 0; i < n; i++) {
        if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
            if (highest_priority_index == -1 || 
                processes[i].priority < processes[highest_priority_index].priority) {
                highest_priority_index = i;
            }
        }
    }
    return highest_priority_index;
}

void priority_scheduling(struct Process processes[], int n) {
    int completed = 0;
    int current_time = 0;
    float total_turnaround_time = 0, total_waiting_time = 0;

    while (completed < n) {
        int highest_priority_index = find_highest_priority_process(processes, n, current_time);

        if (highest_priority_index != -1) {
            processes[highest_priority_index].remaining_time--;

            // If process finishes execution
            if (processes[highest_priority_index].remaining_time == 0) {
                completed++;
                processes[highest_priority_index].completion_time = current_time + 1;
                processes[highest_priority_index].turnaround_time = 
                    processes[highest_priority_index].completion_time - 
                    processes[highest_priority_index].arrival_time;
                processes[highest_priority_index].waiting_time = 
                    processes[highest_priority_index].turnaround_time - 
                    processes[highest_priority_index].burst_time;

                total_turnaround_time += processes[highest_priority_index].turnaround_time;
                total_waiting_time += processes[highest_priority_index].waiting_time;
            }
        }

        current_time++;
    }
    printf("\nPID\tAT\tBT\tP\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n",
               processes[i].id, processes[i].arrival_time, processes[i].burst_time,
               processes[i].priority, processes[i].completion_time,
               processes[i].turnaround_time, processes[i].waiting_time);
    }

    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround_time / n);
    printf("Average Waiting Time: %.2f\n", total_waiting_time / n);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    printf("Enter arrival time, burst time, and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time; // Initialize remaining time
        processes[i].finished = 0;
    }

    priority_scheduling(processes, n);

    return 0;
}
