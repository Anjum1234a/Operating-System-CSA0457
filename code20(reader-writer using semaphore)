#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
sem_t rw_mutex; 
sem_t mutex;    
int read_count = 0;
void* reader(void* arg) {
    int id = *(int*)arg;
    sem_wait(&mutex);
    read_count++;
    if (read_count == 1) sem_wait(&rw_mutex); 
    sem_post(&mutex); 
    printf("Reader %d: Reading resource\n", id);
    sleep(1); 
    sem_wait(&mutex); 
    read_count--;
    if (read_count == 0) sem_post(&rw_mutex); 
    sem_post(&mutex);
    return NULL;
}
void* writer(void* arg) {
    int id = *(int*)arg;
    sem_wait(&rw_mutex); 
    printf("Writer %d: Writing to resource\n", id);
    sleep(1); 
    sem_post(&rw_mutex); 
    return NULL;
}
int main() {
    pthread_t r1, r2, w1, w2;
    int r1_id = 1, r2_id = 2, w1_id = 1, w2_id = 2;
    sem_init(&rw_mutex, 0, 1);
    sem_init(&mutex, 0, 1);
    pthread_create(&r1, NULL, reader, &r1_id);
    pthread_create(&w1, NULL, writer, &w1_id);
    pthread_create(&r2, NULL, reader, &r2_id);
    pthread_create(&w2, NULL, writer, &w2_id);
    pthread_join(r1, NULL);
    pthread_join(w1, NULL);
    pthread_join(r2, NULL);
    pthread_join(w2, NULL);
    sem_destroy(&rw_mutex);
    sem_destroy(&mutex);
    return 0;
}
