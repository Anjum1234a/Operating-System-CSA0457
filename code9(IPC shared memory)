#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>
#include <unistd.h>

#define SHM_SIZE 1024 // Size of the shared memory

int main() {
    pid_t pid;
    int shmid;
    char *shared_memory;
    key_t key = 1234;

    // Create a shared memory segment
    shmid = shmget(key, SHM_SIZE, IPC_CREAT | 0666);
    if (shmid < 0) {
        perror("shmget");
        exit(1);
    }

    // Fork a new process
    pid = fork();
    if (pid < 0) {
        perror("fork");
        exit(1);
    }

    if (pid == 0) {
        // Child process: Writer
        shared_memory = (char *)shmat(shmid, NULL, 0);
        if (shared_memory == (char *)-1) {
            perror("shmat");
            exit(1);
        }

        printf("Child Process: Enter a message to write to shared memory: ");
        fgets(shared_memory, SHM_SIZE, stdin);
        shmdt(shared_memory); // Detach from shared memory
    } else {
        // Parent process: Reader
        wait(NULL); // Wait for the child process to complete
        shared_memory = (char *)shmat(shmid, NULL, 0);
        if (shared_memory == (char *)-1) {
            perror("shmat");
            exit(1);
        }

        printf("Parent Process: Reading message from shared memory...\n");
        printf("Message: %s", shared_memory);

        // Detach and destroy shared memory
        shmdt(shared_memory);
        shmctl(shmid, IPC_RMID, NULL); // Mark the shared memory for deletion
    }

    return 0;
}
