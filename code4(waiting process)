#include <stdio.h>

struct Process {
    int pid;            
    int burst_time;     
    int waiting_time;  
    int turnaround_time;
    int completed;     
};

void calculate_times(struct Process processes[], int n) {
    int completed_processes = 0, current_time = 0;
    float total_waiting_time = 0, total_turnaround_time = 0;

    while (completed_processes < n) {
        int shortest_job = -1;
        int min_burst_time = 1e9; 
        for (int i = 0; i < n; i++) {
            if (!processes[i].completed && processes[i].burst_time < min_burst_time) {
                min_burst_time = processes[i].burst_time;
                shortest_job = i;
            }
        }

        if (shortest_job == -1) {
            break; 
        }
        processes[shortest_job].waiting_time = current_time;
        processes[shortest_job].turnaround_time = current_time + processes[shortest_job].burst_time;
        current_time += processes[shortest_job].burst_time;
        processes[shortest_job].completed = 1;
        completed_processes++;
    }
}

void display_processes(struct Process processes[], int n) {
    float total_waiting_time = 0, total_turnaround_time = 0;

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].pid,
               processes[i].burst_time,
               processes[i].waiting_time,
               processes[i].turnaround_time);
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }
    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);
}

int main() {
    int n;   
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1; // Process IDs start from 1
        printf("Enter burst time for process P%d: ", processes[i].pid);
        scanf("%d", &processes[i].burst_time);
        processes[i].completed = 0; // Initialize completed flag
    }
    calculate_times(processes, n);
    display_processes(processes, n);

    return 0;
}
